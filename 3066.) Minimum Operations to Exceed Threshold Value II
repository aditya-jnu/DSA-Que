class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        long long size = nums.size();
        sort(nums.begin(), nums.end());
        long long count = 0;

        if (size < 2) {
            return -1;
        }

        int i = 0;
        while (i < nums.size() - 1 && nums[0] < k) {
            long long x = nums[0];
            long long y = nums[1];
            long long temp = min(x, y) * 2 + max(x, y);
            nums.erase(nums.begin(), nums.begin() + 2);
            nums.insert(nums.begin(), temp);
            count++;
            sort(nums.begin(), nums.end());
        }

        return count;
    }
};


class Solution {
public:
    int minOperations(vector<int>& nums, int k) {
        priority_queue<long long, vector<long long>, greater<long long>> minHeap(nums.begin(), nums.end());
        int count = 0;

        while (minHeap.size() > 1 && minHeap.top() < k) {
            long long x = minHeap.top(); minHeap.pop();
            long long y = minHeap.top(); minHeap.pop();

            long long temp = min(x, y) * 2 + max(x, y);
            minHeap.push(temp);
            count++;
        }

        return (minHeap.top() >= k) ? count : -1;
    }
};
