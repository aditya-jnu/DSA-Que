O(n^2) give tle
// class Solution {
// public:
//     long long countBadPairs(vector<int>& nums) {
//         int size = nums.size();
//         int count = 0;

//         for (int i = 0; i < size - 1; i++) {
//             for (int j = i + 1; j < size; j++) {
//                 if (i < j) {
//                     if (j - i != nums[j] - nums[i]) {
//                         count++;
//                     }
//                 }
//             }
//         }
//         return count;
//     }
// };


O(n) beats 70% + 
class Solution {
public:
    long long countBadPairs(std::vector<int>& nums) {
        unordered_map<int, int> hashMap;
        long long sum = 0;
        int size = nums.size();
        
        for (int i = 0; i < size; i++) {
            hashMap[i - nums[i]]++;
        }

        for (const auto& pair : hashMap) {
            long long value = pair.second;
            if (value > 1) {
                sum += (value * (value - 1)) / 2;
            }
        }
        return (1LL * size * (size - 1) / 2) - sum;
    }
};
