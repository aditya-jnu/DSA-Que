// class Solution {
// public:
//     int integerReplacement(int n) {
//         long long count = 0;
//         while (n != 1) {
//             if (n % 2 == 0) {
//                 n = n / 2;
//             } else {
//                 if (n == 3 || (n & 2) == 0) {
//                     n--;
//                 } else {
//                     n++;
//                 }
//             }
//             count++;
//         }
//         return count;
//     }
// };

class Solution {
public:
    unordered_map<long long, int> memo;

    int dp(long long num) {
        if (num == 1) return 0;
        if (memo.find(num) != memo.end()) return memo[num];

        if (num % 2 == 0) memo[num] = 1 + dp(num / 2);
        else memo[num] = 1 + min(dp(num + 1), dp(num - 1));

        return memo[num];
    }

    int integerReplacement(int n) {
        return dp(n);
    }
};
