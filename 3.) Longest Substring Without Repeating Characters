// class Solution {
// public:
//     int lengthOfLongestSubstring(string s) {
//         int size = s.size();
//         int count=0;
//         vector<int> track;
//         for(int i=0; i<size; i++)
//         {
//             for(int j=i; j<size; j++)
//             {
//                 if(s[i] != s[j])
//                 {
//                     count++;
//                 }
//             }
//             track.push_back(count);
//         }
//         int ans = max(track);
//         return ans;
//     }
// };


class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int size = s.size();
        int maxLength = 0;
        int start = 0;
        unordered_set<char> uniqueChars;
        
        for (int end = 0; end < size; ++end) {
            while (uniqueChars.find(s[end]) != uniqueChars.end()) {
                uniqueChars.erase(s[start]);
                start++;
            }
            uniqueChars.insert(s[end]);
            maxLength = max(maxLength, end - start + 1);
        }
        
        return maxLength;
    }
};
